plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2019.2.1"
}

/**
 * Custom rule to enable more compiler warnings despite what compiler arguments the GradleRIO plugin sets.
 *
 * This rule is contained inline rather than in buildSrc or an external .gradle file to prevent divergent dependency versions for
 * 'edu.wpi.first:ToolchainPlugin' (transitively via GradleRIO). It is also here to take advantage of the offline
 * maven cache (set up in settings.gradle) to prevent build errors due to lack of internet access at competition.
 */
class IntimitronsCompilerWarningRules extends RuleSource {
    @Finalize
    void modifyCompilerArgs(BinaryContainer binaries) {
        // GradleRIO only enables some warnings, and suppresses other warnings.
        // To turn on these warnings and remove the suppressions placed by GradleRIO, we add a rule
        // that will run after GradleRIO's rule. (GradleRIO uses @Mutate, we use @Finalize).
        //
        // See Also:
        // https://github.com/wpilibsuite/GradleRIO/blob/d0a5cdcabb4113383b2a24a91fe73ab869b7c88c/src/main/groovy/edu/wpi/first/gradlerio/wpi/WPINativeCompileRules.groovy
        // https://github.com/wpilibsuite/GradleRIO/commit/d0a946a1c9fc52b4afd45b7dc1b128932347b3e9

        binaries.withType(NativeBinarySpec, { NativeBinarySpec bin ->
            if (bin.targetPlatform.name.equals(edu.wpi.first.toolchain.NativePlatforms.roborio)) {
                // Default includes '-Wformat=2', '-pedantic', '-Wno-psabi', '-Wno-unused-parameter', '-Wno-error=deprecated-declarations'
                bin.cppCompiler.args.removeAll {arg ->
                    arg.startsWith('-W')
                }
                bin.cppCompiler.args.remove('-pedantic')
                bin.cppCompiler.args.addAll(['-Werror', '-Wall', '-Wextra', '-Wpedantic', '-Wformat=2'])

                // Default includes '-Wformat=2', '-Wno-psabi', '-Wno-unused-parameter'
                bin.cCompiler.args.removeAll {arg ->
                    arg.startsWith('-W')
                }
                bin.cCompiler.args.addAll(['-Werror', '-Wall', '-Wextra', '-Wpedantic', '-Wformat=2'])
            }
        })
    }
}
// If this plugin is causing problems with the build, it can be disabled by commenting out this line.
// If the plugin's code (above) is giving errors, comment out the whole class and this line
apply plugin: IntimitronsCompilerWarningRules

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcNativeArtifact('frcCpp') {
            targets << "roborio"
            component = 'frcUserProgram'
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Set this to true to include the src folder in the include directories passed
// to the compiler. Some eclipse project imports depend on this behavior.
// We recommend leaving this disabled if possible. Note for eclipse project
// imports this is enabled by default. For new projects, its disabled
def includeSrcInIncludeRoot = false

// Set this to true to enable desktop support.
def includeDesktopSupport = false

model {
    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                    include '**/*.cpp', '**/*.cc'
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                    if (includeSrcInIncludeRoot) {
                        srcDir 'src/main/cpp'
                    }
                }
            }

            // Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
            useLibrary(it, "wpilib")
            wpi.deps.vendor.cpp(it)
        }
    }
    testSuites {
        frcUserProgramTest(GoogleTestTestSuiteSpec) {
            testing $.components.frcUserProgram

            sources.cpp {
                source {
                    srcDir 'src/test/cpp'
                    include '**/*.cpp'
                }
            }

            useLibrary(it, "wpilib", "googletest")
            wpi.deps.vendor.cpp(it)
        }
    }
}
